/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type WithdrawData1155Struct = {
  cloneAddress: PromiseOrValue<string>;
  tokenId: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
};

export type WithdrawData1155StructOutput = [string, BigNumber, BigNumber] & {
  cloneAddress: string;
  tokenId: BigNumber;
  amount: BigNumber;
};

export type WithdrawDataStruct = {
  cloneAddress: PromiseOrValue<string>;
  tokenIds: PromiseOrValue<BigNumberish>[];
};

export type WithdrawDataStructOutput = [string, BigNumber[]] & {
  cloneAddress: string;
  tokenIds: BigNumber[];
};

export interface MultiMinterInterface extends utils.Interface {
  functions: {
    "_owner()": FunctionFragment;
    "clones(uint256)": FunctionFragment;
    "clonesLength()": FunctionFragment;
    "deployClones(uint256)": FunctionFragment;
    "fundClones(uint256,uint256)": FunctionFragment;
    "hotMintWithoutIDs(uint256,uint8,uint8,bytes)": FunctionFragment;
    "massWithdraw1155((address,uint256,uint256)[],address,address)": FunctionFragment;
    "massWithdrawNft((address,uint256[])[],address,address)": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "mintClone(address,uint256,uint256,bytes)": FunctionFragment;
    "mintFromDeployedClones(uint256,uint8,uint8,bytes)": FunctionFragment;
    "mintFromDeployedClonesWithDiffData(uint256,uint8,bytes[])": FunctionFragment;
    "mintFromDeployedClonesWithFund(uint256,uint8,uint8,bytes)": FunctionFragment;
    "mintFromDeployedClonesWithFund1155(uint256,uint8,uint8,bytes,bytes)": FunctionFragment;
    "mintFromDeployedClonesWithFundWithDiffData(uint256,uint8,bytes[])": FunctionFragment;
    "mintWithClonesDeploy(uint256,uint8,bytes)": FunctionFragment;
    "mintWithDeployedClones1155(uint256,uint8,uint8,bytes,bytes)": FunctionFragment;
    "multiMint(uint256,uint256,bytes)": FunctionFragment;
    "nftPrice()": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "saleAddress()": FunctionFragment;
    "setDropInfo(uint256,address,uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "tokensForWallet()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawEth(address)": FunctionFragment;
    "withdrawEthClones(address)": FunctionFragment;
    "withdrawNft(uint256[],address,address)": FunctionFragment;
    "withdrawNft1155(uint256,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_owner"
      | "clones"
      | "clonesLength"
      | "deployClones"
      | "fundClones"
      | "hotMintWithoutIDs"
      | "massWithdraw1155"
      | "massWithdrawNft"
      | "maxSupply"
      | "mintClone"
      | "mintFromDeployedClones"
      | "mintFromDeployedClonesWithDiffData"
      | "mintFromDeployedClonesWithFund"
      | "mintFromDeployedClonesWithFund1155"
      | "mintFromDeployedClonesWithFundWithDiffData"
      | "mintWithClonesDeploy"
      | "mintWithDeployedClones1155"
      | "multiMint"
      | "nftPrice"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "renounceOwnership"
      | "saleAddress"
      | "setDropInfo"
      | "setOwner"
      | "tokensForWallet"
      | "transferOwnership"
      | "withdrawEth"
      | "withdrawEthClones"
      | "withdrawNft"
      | "withdrawNft1155"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "clones",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clonesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployClones",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundClones",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hotMintWithoutIDs",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "massWithdraw1155",
    values: [
      WithdrawData1155Struct[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "massWithdrawNft",
    values: [
      WithdrawDataStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintClone",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromDeployedClones",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromDeployedClonesWithDiffData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromDeployedClonesWithFund",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromDeployedClonesWithFund1155",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromDeployedClonesWithFundWithDiffData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithClonesDeploy",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithDeployedClones1155",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiMint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "nftPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDropInfo",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEthClones",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNft",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNft1155",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clonesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployClones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundClones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hotMintWithoutIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massWithdraw1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massWithdrawNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintClone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFromDeployedClones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFromDeployedClonesWithDiffData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFromDeployedClonesWithFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFromDeployedClonesWithFund1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFromDeployedClonesWithFundWithDiffData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithClonesDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithDeployedClones1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDropInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensForWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEthClones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNft1155",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface MultiMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _owner(overrides?: CallOverrides): Promise<[string]>;

    clones(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    clonesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    deployClones(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundClones(
      amount: PromiseOrValue<BigNumberish>,
      nftNumberPerClone: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hotMintWithoutIDs(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    massWithdraw1155(
      withdrawData: WithdrawData1155Struct[],
      nftContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    massWithdrawNft(
      withdrawData: WithdrawDataStruct[],
      nftContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintClone(
      sale: PromiseOrValue<string>,
      _mintPerClone: PromiseOrValue<BigNumberish>,
      _nftPrice: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintFromDeployedClones(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintFromDeployedClonesWithDiffData(
      clonesAmount: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintFromDeployedClonesWithFund(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintFromDeployedClonesWithFund1155(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      supplycall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintFromDeployedClonesWithFundWithDiffData(
      clonesAmount: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintWithClonesDeploy(
      clonesQuantity: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintWithDeployedClones1155(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      supplycall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiMint(
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _txCount: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nftPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saleAddress(overrides?: CallOverrides): Promise<[string]>;

    setDropInfo(
      _nftprice: PromiseOrValue<BigNumberish>,
      saleaddr: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokensForWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawEth(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawEthClones(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNft(
      tokenIds: PromiseOrValue<BigNumberish>[],
      sale: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNft1155(
      tokenId: PromiseOrValue<BigNumberish>,
      sale: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _owner(overrides?: CallOverrides): Promise<string>;

  clones(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  clonesLength(overrides?: CallOverrides): Promise<BigNumber>;

  deployClones(
    quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundClones(
    amount: PromiseOrValue<BigNumberish>,
    nftNumberPerClone: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hotMintWithoutIDs(
    clonesAmount: PromiseOrValue<BigNumberish>,
    txPerClone: PromiseOrValue<BigNumberish>,
    mintPerCall: PromiseOrValue<BigNumberish>,
    datacall: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  massWithdraw1155(
    withdrawData: WithdrawData1155Struct[],
    nftContract: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  massWithdrawNft(
    withdrawData: WithdrawDataStruct[],
    nftContract: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  mintClone(
    sale: PromiseOrValue<string>,
    _mintPerClone: PromiseOrValue<BigNumberish>,
    _nftPrice: PromiseOrValue<BigNumberish>,
    datacall: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintFromDeployedClones(
    clonesAmount: PromiseOrValue<BigNumberish>,
    txPerClone: PromiseOrValue<BigNumberish>,
    mintPerCall: PromiseOrValue<BigNumberish>,
    datacall: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintFromDeployedClonesWithDiffData(
    clonesAmount: PromiseOrValue<BigNumberish>,
    mintPerClone: PromiseOrValue<BigNumberish>,
    datacall: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintFromDeployedClonesWithFund(
    clonesAmount: PromiseOrValue<BigNumberish>,
    txPerClone: PromiseOrValue<BigNumberish>,
    mintPerCall: PromiseOrValue<BigNumberish>,
    datacall: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintFromDeployedClonesWithFund1155(
    clonesAmount: PromiseOrValue<BigNumberish>,
    txPerClone: PromiseOrValue<BigNumberish>,
    mintPerCall: PromiseOrValue<BigNumberish>,
    datacall: PromiseOrValue<BytesLike>,
    supplycall: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintFromDeployedClonesWithFundWithDiffData(
    clonesAmount: PromiseOrValue<BigNumberish>,
    mintPerClone: PromiseOrValue<BigNumberish>,
    datacall: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintWithClonesDeploy(
    clonesQuantity: PromiseOrValue<BigNumberish>,
    mintPerClone: PromiseOrValue<BigNumberish>,
    datacall: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintWithDeployedClones1155(
    clonesAmount: PromiseOrValue<BigNumberish>,
    txPerClone: PromiseOrValue<BigNumberish>,
    mintPerCall: PromiseOrValue<BigNumberish>,
    datacall: PromiseOrValue<BytesLike>,
    supplycall: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiMint(
    _numberOfTokens: PromiseOrValue<BigNumberish>,
    _txCount: PromiseOrValue<BigNumberish>,
    datacall: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saleAddress(overrides?: CallOverrides): Promise<string>;

  setDropInfo(
    _nftprice: PromiseOrValue<BigNumberish>,
    saleaddr: PromiseOrValue<string>,
    _maxSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokensForWallet(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawEth(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawEthClones(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNft(
    tokenIds: PromiseOrValue<BigNumberish>[],
    sale: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNft1155(
    tokenId: PromiseOrValue<BigNumberish>,
    sale: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _owner(overrides?: CallOverrides): Promise<string>;

    clones(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    clonesLength(overrides?: CallOverrides): Promise<BigNumber>;

    deployClones(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundClones(
      amount: PromiseOrValue<BigNumberish>,
      nftNumberPerClone: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hotMintWithoutIDs(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    massWithdraw1155(
      withdrawData: WithdrawData1155Struct[],
      nftContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    massWithdrawNft(
      withdrawData: WithdrawDataStruct[],
      nftContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mintClone(
      sale: PromiseOrValue<string>,
      _mintPerClone: PromiseOrValue<BigNumberish>,
      _nftPrice: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintFromDeployedClones(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintFromDeployedClonesWithDiffData(
      clonesAmount: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintFromDeployedClonesWithFund(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintFromDeployedClonesWithFund1155(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      supplycall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintFromDeployedClonesWithFundWithDiffData(
      clonesAmount: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithClonesDeploy(
      clonesQuantity: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithDeployedClones1155(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      supplycall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    multiMint(
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _txCount: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    saleAddress(overrides?: CallOverrides): Promise<string>;

    setDropInfo(
      _nftprice: PromiseOrValue<BigNumberish>,
      saleaddr: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensForWallet(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEth(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEthClones(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNft(
      tokenIds: PromiseOrValue<BigNumberish>[],
      sale: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNft1155(
      tokenId: PromiseOrValue<BigNumberish>,
      sale: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    clones(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clonesLength(overrides?: CallOverrides): Promise<BigNumber>;

    deployClones(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundClones(
      amount: PromiseOrValue<BigNumberish>,
      nftNumberPerClone: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hotMintWithoutIDs(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    massWithdraw1155(
      withdrawData: WithdrawData1155Struct[],
      nftContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    massWithdrawNft(
      withdrawData: WithdrawDataStruct[],
      nftContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mintClone(
      sale: PromiseOrValue<string>,
      _mintPerClone: PromiseOrValue<BigNumberish>,
      _nftPrice: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintFromDeployedClones(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintFromDeployedClonesWithDiffData(
      clonesAmount: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintFromDeployedClonesWithFund(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintFromDeployedClonesWithFund1155(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      supplycall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintFromDeployedClonesWithFundWithDiffData(
      clonesAmount: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintWithClonesDeploy(
      clonesQuantity: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintWithDeployedClones1155(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      supplycall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiMint(
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _txCount: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setDropInfo(
      _nftprice: PromiseOrValue<BigNumberish>,
      saleaddr: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokensForWallet(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawEth(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawEthClones(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNft(
      tokenIds: PromiseOrValue<BigNumberish>[],
      sale: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNft1155(
      tokenId: PromiseOrValue<BigNumberish>,
      sale: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clones(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clonesLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployClones(
      quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundClones(
      amount: PromiseOrValue<BigNumberish>,
      nftNumberPerClone: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hotMintWithoutIDs(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    massWithdraw1155(
      withdrawData: WithdrawData1155Struct[],
      nftContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    massWithdrawNft(
      withdrawData: WithdrawDataStruct[],
      nftContract: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintClone(
      sale: PromiseOrValue<string>,
      _mintPerClone: PromiseOrValue<BigNumberish>,
      _nftPrice: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintFromDeployedClones(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintFromDeployedClonesWithDiffData(
      clonesAmount: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintFromDeployedClonesWithFund(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintFromDeployedClonesWithFund1155(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      supplycall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintFromDeployedClonesWithFundWithDiffData(
      clonesAmount: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintWithClonesDeploy(
      clonesQuantity: PromiseOrValue<BigNumberish>,
      mintPerClone: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintWithDeployedClones1155(
      clonesAmount: PromiseOrValue<BigNumberish>,
      txPerClone: PromiseOrValue<BigNumberish>,
      mintPerCall: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      supplycall: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiMint(
      _numberOfTokens: PromiseOrValue<BigNumberish>,
      _txCount: PromiseOrValue<BigNumberish>,
      datacall: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nftPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDropInfo(
      _nftprice: PromiseOrValue<BigNumberish>,
      saleaddr: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokensForWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEth(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEthClones(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNft(
      tokenIds: PromiseOrValue<BigNumberish>[],
      sale: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNft1155(
      tokenId: PromiseOrValue<BigNumberish>,
      sale: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
